apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def buildTime() {
    return new Date().format("yyyy_MM_dd_HH_mm_ss");
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}


android {

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        multiDexEnabled true

        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi-v7a" //, "armeabi","arm64-v8a", "x86","x86_64"
        }

    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }


    buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            buildConfigField "String", "BASE_URL", "\"\""
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            //Proguard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release

//            resValue "string", "app_name", "@string/app_name_release"

            android.applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        //这里修改apk的文件名
                        def fileName = "release_app_v${defaultConfig.versionName}_build_${buildTime()}.apk"
                        outputFileName = new File(fileName)
                    }
                }
            }
        }

        debug {
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "BASE_URL", "\"\""
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
            android.applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        //这里修改apk的文件名
                        def fileName = "bug_app_v_${defaultConfig.versionName}_build_${buildTime()}.apk"
                        //"../Android/workspace/NetWorkTool/apk",
                        outputFileName = new File(fileName)
                    }
                }
            }
        }
    }

    resourcePrefix "app_"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':common_lib')

    if (!isMainModule.toBoolean()) {
        implementation project(':module_main')
    }

    if (!isCenterModule.toBoolean()) {
        implementation project(':module_center')
    }

    if (!isHomeModule.toBoolean()) {
        implementation project(':module_home')
    }

    kapt "com.alibaba:arouter-compiler:${rootProject.ext.dependVersion.arouterCompilerVersion}"
}
